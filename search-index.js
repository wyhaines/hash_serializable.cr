crystal_doc_search_index_callback({"repository_name":"hash_serializable","body":"# hash_serializable\n\n[![hash_serializable.cr CI](https://github.com/wyhaines/hash_serializable.cr/actions/workflows/ci.yml/badge.svg)](https://github.com/wyhaines/hash_serializable.cr/actions/workflows/ci.yml)\n[![hash_serializable.cr Build Docs](https://github.com/wyhaines/hash_serializable.cr/actions/workflows/build_docs.yml/badge.svg)](https://github.com/wyhaines/hash_serializable.cr/actions/workflows/build_docs.yml)\n\n[![GitHub release](https://img.shields.io/github/release/wyhaines/hash_serializable.cr.svg?style=for-the-badge)](https://github.com/wyhaines/hash_serializable.cr/releases)\n![GitHub commits since latest release (by SemVer)](https://img.shields.io/github/commits-since/wyhaines/hash_serializable.cr/latest?style=for-the-badge)\n\nIt can be useful to be able to serialize and deserialize between hashes\nand objects the same way that one can between JSON and objects and YAML\nand objects. This implementation is aiming to be feature-consistent with\nJSON::Serializable and YAML::Serializable, while working with hashes.\n\nThe `Hash::Serializable` module automatically generates methods for serialization when included.\n\n### Example\n\n```crystal\nrequire \"hash_serializable\"\n\nclass Note\n  include Hash::Serializable\n\n  property message : String = \"DEFAULT\"\nend\n\nclass Location\n  include Hash::Serializable\n\n  @[Hash::Field(key: \"lat\")]\n  property latitude : Float64\n\n  @[Hash::Field(key: \"lon\")]\n  property longitude : Float64\n\n  property note : Note\nend\n\nclass House\n  include Hash::Serializable\n\n  property address : String\n  property location : Location?\n  property note : Note\nend\n\narg = {\n  \"note\" => {\n    \"message\" => \"Nice Address\",\n  },\n  \"address\"  => \"Crystal Road 1234\",\n  \"location\" => {\n    \"lat\"  => 12.3,\n    \"lon\"  => 34.5,\n    \"note\" => {\n      \"message\" => \"hmmmm\",\n    },\n  },\n}\nhouse = House.from_hash(arg)\n\nhouse.is_a?(House).should be_true\nhouse.address.should eq \"Crystal Road 1234\"\nhouse.location.is_a?(Location).should be_true\nhouse.location.not_nil!.latitude.should eq 12.3\nhouse.location.not_nil!.longitude.should eq 34.5\nhouse.note.message.should eq \"Nice Address\"\nhouse.location.not_nil!.note.message.should eq \"hmmmm\"\nhouse.to_hash.should eq arg\n```\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     hash_serializable:\n       github: your-github-user/hash_serializable\n   ```\n\n2. Run `shards install`\n\n## Usage\n\nIncluding `Hash::Serializable` will create `#to_hash` and `self.from_hash` methods\non the current class, and a constructor which takes a Hash. By default, `self.from_hash`\nwill deserialize a Hash into an instance of the object that it is passed to, according\nto the definition of the class, and `#to_hash` will serialize the class into a Hash\ncontaining the value of every instance variable, the keys being the instance variable\nnames.\n\nIt will descend through a nested class structure, where variables in one class\npoint to objects that, in turn, have instance variables. It should also deal correctly\nwith type unions.\n\nTo change how individual instance variables are parsed and serialized, the annotation\n`Hash::Field` can be placed on the instance variable. Annotating property, getter, and\nsetter macros is also allowed.\n\n```crystal\nrequire \"hash_serializable\"\n\nstruct A\n  include Hash::Serializable\n\n  @[Hash::Field(key: \"my_key\")]\n  getter a : Int32?\nend\n```\n\n`Hash::Field` properties:\n* **ignore**: if `true` skip this field in serialization and deserialization (by default false)\n* **ignore_serialize**: if `true` skip this field in serialization (by default false)\n* **ignore_deserialize**: if `true` skip this field in deserialization (by default false)\n* **key**: the value of the key in the json object (by default the name of the instance variable)\n* **cast**: takes either a proc, or a method name; if proc, the hash value will be passed to the proc, and the return value will be used as the value of the instance variable; if method, the method will be called *on* the hash value, and the return value used for the instance variable value\n* **presence**: if `true`, a `@{{key}}_present` instance variable will be generated when the key was present (even if it has a `null` value), `false` by default; this does not declare the `@{{key}}_present` variable for you, so you will be responsible for ensuring that a Bool variable is declared\n\nDeserialization respects default values of variables.\n\n### Extensions: `Hash::Serializable::Strict` and `Hash::Serializable::Unmapped`\n\nIf the `Hash::Serializable::Strict` module is included, unknown properties in the Hash\ndocument will raise an exception. By default the unknown properties are silently ignored.\n\nIf the `Hash::Serializable::Unmapped` module is included, unknown properties in the Hash\nwill be stored in a hash with an appropriate type signature. On serialization, any keys inside json_unmapped\nwill be serialized into the hash, as well.\n\n```crystal\nrequire \"hash_serializable\"\n\nstruct A\n  include Hash::Serializable\n  include Hash::Serializable::Unmapped\n  @a : Int32\nend\n\na = A.from_json(%({\"a\":1,\"b\":2})) # => A(@json_unmapped={\"b\" => 2_i64}, @a=1)\na.to_json                         # => {\"a\":1,\"b\":2}\n```\n\n### Casting\n\n*Hash::Serializable* can automatically convert values from one type to another. For example, if one has a *RequestParams* object that serialized the query parameters in an HTTP request, and one wanted to define a *user_id* field that was an integer, one might do something like this:\n\n```crystal\nstruct RequestParams\n  use Hash::Serializable\n\n  @[Hash::Field(cast: :to_i)]\n  getter user_id : Int32\nend\n\nparams = RequestParams.new({\"user_id\" => \"123\"})\npp params # >    #<RequestParams:0x7f2653e2f080 @user_id=123 >\n```\n\nOne can also provide a proc to do the value conversion:\n\n```crystal\nstruct MyObj\n  use Hash::Serializable\n\n  @[Hash::Field(\n    key: \"number\",\n    cast: ->(x : String | Int::Signed | Int::Unsigned | Float::Primitive) do\n      BigInt.new(x) ** 2\n    end)]\n  getter square : BigInt\nend\n\nobj = MyObj.new({\"number\" => 12345678901234567890})\npp obj # >    #<MyObj:0x7fc5adbe5e80 @square=152415787532388367501905199875019052100>\n```\n\nThe library does not yet support having procs or methods which will cast back to the original type.\n\n## Development\n\nIf you want to help to fix bugs, clean up the code or the documentation, or help with additional features, fork the repository, and work in your fork, and then create a pull request against this repository.\n\nCheck [issues](https://github.com/wyhaines/hash_serializable.cr/issues) for any known problems, and create new issues if you have problems or questions or feature requests.\n\n## Contributing\n\n1. Fork it (<https://github.com/wyhaines/hash_serializable/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Kirk Haines](https://github.com/wyhaines) - creator and maintainer\n\n![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/wyhaines/hash_serializable.cr?style=for-the-badge)\n![GitHub issues](https://img.shields.io/github/issues/wyhaines/hash_serializable.cr?style=for-the-badge)\n","program":{"html_id":"hash_serializable/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"hash_serializable","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"hash_serializable/Hash","path":"Hash.html","kind":"class","full_name":"Hash(K, V)","name":"Hash","abstract":false,"superclass":{"html_id":"hash_serializable/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hash_serializable/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"hash_serializable/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"hash_serializable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hash_serializable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/hash_serializable.cr","line_number":3,"url":null},{"filename":"src/version.cr","line_number":1,"url":null}],"repository_name":"hash_serializable","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"hash_serializable/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"hash_serializable/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"doc":"A `Hash` represents a collection of key-value mappings, similar to a dictionary.\n\nMain operations are storing a key-value mapping (`#[]=`) and\nquerying the value associated to a key (`#[]`). Key-value mappings can also be\ndeleted (`#delete`).\nKeys are unique within a hash. When adding a key-value mapping with a key that\nis already in use, the old value will be forgotten.\n\n```\n# Create a new Hash for mapping String to Int32\nhash = Hash(String, Int32).new\nhash[\"one\"] = 1\nhash[\"two\"] = 2\nhash[\"one\"] # => 1\n```\n\n[Hash literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/hash.html)\ncan also be used to create a `Hash`:\n\n```\n{\"one\" => 1, \"two\" => 2}\n```\n\nImplementation is based on an open hash table.\nTwo objects refer to the same hash key when their hash value (`Object#hash`)\nis identical and both objects are equal to each other (`Object#==`).\n\nEnumeration follows the order that the corresponding keys were inserted.\n\nNOTE: When using mutable data types as keys, changing the value of a key after\nit was inserted into the `Hash` may lead to undefined behaviour. This can be\nrestored by re-indexing the hash with `#rehash`.","summary":"<p>A <code><a href=\"Hash.html\">Hash</a></code> represents a collection of key-value mappings, similar to a dictionary.</p>","types":[{"html_id":"hash_serializable/Hash/Field","path":"Hash/Field.html","kind":"annotation","full_name":"Hash::Field","name":"Field","abstract":false,"locations":[{"filename":"src/hash_serializable.cr","line_number":4,"url":null}],"repository_name":"hash_serializable","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hash_serializable/Hash","kind":"class","full_name":"Hash(K, V)","name":"Hash"}},{"html_id":"hash_serializable/Hash/Serializable","path":"Hash/Serializable.html","kind":"module","full_name":"Hash::Serializable","name":"Serializable","abstract":false,"locations":[{"filename":"src/hash_serializable.cr","line_number":159,"url":null},{"filename":"src/version.cr","line_number":2,"url":null}],"repository_name":"hash_serializable","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.2.0\""}],"namespace":{"html_id":"hash_serializable/Hash","kind":"class","full_name":"Hash(K, V)","name":"Hash"},"doc":"The `Hash::Serializable` module automatically generates methods for serialization when included.\n\n### Example\n\n```\nrequire \"hash_serializable\"\n\nclass Note\n  include Hash::Serializable\n\n  property message : String = \"DEFAULT\"\nend\n\nclass Location\n  include Hash::Serializable\n\n  @[Hash::Field(key: \"lat\")]\n  property latitude : Float64\n\n  @[Hash::Field(key: \"lon\")]\n  property longitude : Float64\n\n  property note : Note\nend\n\nclass House\n  include Hash::Serializable\n\n  property address : String\n  property location : Location?\n  property note : Note\nend\n\narg = {\n  \"note\" => {\n    \"message\" => \"Nice Address\",\n  },\n  \"address\"  => \"Crystal Road 1234\",\n  \"location\" => {\n    \"lat\"  => 12.3,\n    \"lon\"  => 34.5,\n    \"note\" => {\n      \"message\" => \"hmmmm\",\n    },\n  },\n}\nhouse = House.from_hash(arg)\n\nhouse.is_a?(House).should be_true\nhouse.address.should eq \"Crystal Road 1234\"\nhouse.location.is_a?(Location).should be_true\nhouse.location.not_nil!.latitude.should eq 12.3\nhouse.location.not_nil!.longitude.should eq 34.5\nhouse.note.message.should eq \"Nice Address\"\nhouse.location.not_nil!.note.message.should eq \"hmmmm\"\nhouse.to_hash.should eq arg\n\n### Usage\n\nIncluding `Hash::Serializable` will create `#to_hash` and `self.from_hash` methods\non the current class, and a constructor which takes a Hash. By default, `self.from_hash`\nwill deserialize a Hash into an instance of the object that it is passed to, according\nto the definition of the class, and `#to_hash` will serialize the class into a Hash\ncontaining the value of every instance variable, the keys being the instance variable\nnames.\n\nIt will descend through a nested class structure, where variables in one class\npoint to objects that, in turn, have instance variables. It should also deal correctly\nwith type unions.\n\nTo change how individual instance variables are parsed and serialized, the annotation\n`Hash::Field` can be placed on the instance variable. Annotating property, getter, and\nsetter macros is also allowed.\n\n```\nrequire \"hash_serializable\"\n\nstruct A\n  include Hash::Serializable\n\n  @[Hash::Field(key: \"my_key\")]\n  getter a : Int32?\nend\n```\n\n`Hash::Field` properties:\n* **ignore**: if `true` skip this field in serialization and deserialization (by default false)\n* **ignore_serialize**: if `true` skip this field in serialization (by default false)\n* **ignore_deserialize**: if `true` skip this field in deserialization (by default false)\n* **key**: the value of the key in the json object (by default the name of the instance variable)\n* **cast**: takes either a proc, or a method name; if proc, the hash value will be passed to the proc, and the return value will be used as the value of the instance variable; if method, the method will be called *on* the hash value, and the return value used for the instance variable value\n* **presence**: if `true`, a `@{{key}}_present` instance variable will be generated when the key was present (even if it has a `null` value), `false` by default; this does not declare the `@{{key}}_present` variable for you, so you will be responsible for ensuring that a Bool variable is declared\n\nDeserialization respects default values of variables.\n\n### Extensions: `Hash::Serializable::Strict` and `Hash::Serializable::Unmapped`\n\nIf the `Hash::Serializable::Strict` module is included, unknown properties in the Hash\ndocument will raise an exception. By default the unknown properties are silently ignored.\n\nIf the `Hash::Serializable::Unmapped` module is included, unknown properties in the Hash\nwill be stored in a hash with an appropriate type signature. On serialization, any keys inside json_unmapped\nwill be serialized into the hash, as well.\n```\nrequire \"hash_serializable\"\n\nstruct A\n  include Hash::Serializable\n  include Hash::Serializable::Unmapped\n  @a : Int32\nend\n\na = A.from_json(%({\"a\":1,\"b\":2})) # => A(@json_unmapped={\"b\" => 2_i64}, @a=1)\na.to_json                         # => {\"a\":1,\"b\":2}\n```\n\n## Casting\n\n*Hash::Serializable* can automatically convert values from one type to another. For example, if one has a *RequestParams* object that serialized the query parameters in an HTTP request, and one wanted to define a *user_id* field that was an integer, one might do something like this:\n\n  ```\nstruct RequestParams\n  use Hash::Serializable\n\n  @[Hash::Field(cast: :to_i)]\n  getter user_id : Int32\nend\n\nparams = RequestParams.new({\"user_id\" => \"123\"})\npp params # >    #<RequestParams:0x7f2653e2f080 @user_id=123 >\n  ```\n\n  One can also provide a proc to do the value conversion:\n\n  ```\nstruct MyObj\n  use Hash::Serializable\n\n  @[Hash::Field(\n    key: \"number\",\n    cast: ->(x : String | Int::Signed | Int::Unsigned | Float::Primitive) do\n      BigInt.new(x) ** 2\n    end)]\n  getter square : BigInt\nend\n\nobj = MyObj.new({\"number\" => 12345678901234567890})\npp obj # >    #<MyObj:0x7fc5adbe5e80 @square=152415787532388367501905199875019052100>\n  ```\n\n  The library does not yet support having procs or methods which will cast back to the original type.\n","summary":"<p>The <code><a href=\"../Hash/Serializable.html\">Hash::Serializable</a></code> module automatically generates methods for serialization when included.</p>","constructors":[{"html_id":"new(hash:U)forallU-class-method","name":"new","abstract":false,"args":[{"name":"hash","external_name":"hash","restriction":"U"}],"args_string":"(hash : U) forall U","args_html":"(hash : U) forall U","location":{"filename":"src/hash_serializable.cr","line_number":191,"url":null},"def":{"name":"new","args":[{"name":"hash","external_name":"hash","restriction":"U"}],"visibility":"Public","body":"_ = allocate\n_.initialize(hash)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"to_hash-instance-method","name":"to_hash","abstract":false,"location":{"filename":"src/hash_serializable.cr","line_number":310,"url":null},"def":{"name":"to_hash","visibility":"Public","body":"{% if true %}\n        {% tstack = [] of Nil\nostack = [] of Nil\nestack = [] of Nil\ntstack << ([] of Nil)\nostack << @type.instance_vars\nestack << (0..(@type.instance_vars.size - 1)).to_a\n(1..99999).each do\n  if !ostack.empty?\n    o = ostack.last\n    oo = ostack\n    ostack = [] of Nil\n    (0..(oo.size - 2)).each do |idx|\n      ostack << oo[idx]\n    end\n    keys = estack.last\n    oe = estack\n    estack = [] of Nil\n    (0..(oe.size - 2)).each do |idx|\n      estack << oe[idx]\n    end\n    if (!keys.nil?) && (!keys.empty?)\n      (1..99999).each do\n        if (!keys.nil?) && (!keys.empty?)\n          e = keys.first\n          ok = keys\n          keys = [] of Nil\n          (1..(ok.size - 1)).each do |idx|\n            keys << ok[idx]\n          end\n          if o[e].type.union_types.reject do |typ|\n            typ == Nil\n          end.first.class.methods.map() do |__arg3|\n            __arg3.name.stringify\n          end.includes?(\"from_hash\")\n            oe = o[e].type.union_types.reject do |typ|\n              typ == Nil\n            end.first\n            tstack << ([] of Nil)\n            ostack << o\n            estack << keys\n            ostack << oe.instance_vars\n            estack << (0..(oe.instance_vars.size - 1)).to_a\n            keys = [] of Nil\n          else\n            if o[e].type.nilable?\n              tstack.last << \"#{o[e].type} | Nil\"\n            else\n              tstack.last << o[e].type\n            end\n            if keys.empty? && tstack.size > 1\n              ot = tstack\n              top = tstack.last\n              tstack = [] of Nil\n              (0..(ot.size - 2)).each do |idx|\n                tstack << ot[idx]\n              end\n              tstack.last << top\n              tstack.last << Nil\n            end\n          end\n        end\n      end\n    else\n      if tstack.size > 1\n        ot = tstack\n        top = tstack.last\n        tstack = [] of Nil\n        (0..(ot.size - 2)).each do |idx|\n          tstack << ot[idx]\n        end\n        tstack.last << top\n      end\n    end\n  end\nend\ntypes = {} of TypeNode => Bool\ntstack.first.each do |type|\n  types[type] = true\nend\ntype_string = (((((types.keys.map do |m|\n  m.id\nend.join(\" | \")).id.gsub(/\\s*,\\s*/, \" | \")).gsub(/\\[/, \"Hash(String, \")).gsub(/]/, \")\")).gsub(/Hash\\(String\\s*\\|/, \"Hash(String, \")).id\n %}\n\n        h = {} of String => ({{ type_string }})\n        {% for ivar in @type.instance_vars %}\n          {% ann = ivar.annotation(::Hash::Field)\nkey = ((ann && ann[:key]) || ivar).id.stringify\n %}\n          {% if ann && (ann[:ignore] || ann[:ignore_serialize]) %}{% else %}\n            {{ ivar.name }}_ivar = @{{ ivar.name }}\n            if {{ ivar.name }}_ivar.responds_to?(:to_hash)\n              h[{{ key }}] = {{ ivar.name }}_ivar.to_hash\n            else\n              h[{{ key }}] = {{ ivar.name }}_ivar\n            end\n          {% end %}\n        {% end %}\n        {% if @type.instance_vars.select do |iv|\n  iv.name.stringify == \"hash_unmapped\"\nend.empty? %}\n          h\n        {% else %}\n          h.merge(@hash_unmapped)\n        {% end %}\n      {% end %}"}}],"types":[{"html_id":"hash_serializable/Hash/Serializable/Strict","path":"Hash/Serializable/Strict.html","kind":"module","full_name":"Hash::Serializable::Strict","name":"Strict","abstract":false,"locations":[{"filename":"src/hash_serializable.cr","line_number":426,"url":null}],"repository_name":"hash_serializable","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hash_serializable/Hash/Serializable","kind":"module","full_name":"Hash::Serializable","name":"Serializable"}},{"html_id":"hash_serializable/Hash/Serializable/Unmapped","path":"Hash/Serializable/Unmapped.html","kind":"module","full_name":"Hash::Serializable::Unmapped(K)","name":"Unmapped","abstract":false,"locations":[{"filename":"src/hash_serializable.cr","line_number":432,"url":null}],"repository_name":"hash_serializable","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hash_serializable/Hash/Serializable","kind":"module","full_name":"Hash::Serializable","name":"Serializable"},"instance_methods":[{"html_id":"hash_unmapped-instance-method","name":"hash_unmapped","abstract":false,"location":{"filename":"src/hash_serializable.cr","line_number":434,"url":null},"def":{"name":"hash_unmapped","visibility":"Public","body":"@hash_unmapped"}},{"html_id":"hash_unmapped=(hash_unmapped)-instance-method","name":"hash_unmapped=","abstract":false,"args":[{"name":"hash_unmapped","external_name":"hash_unmapped","restriction":""}],"args_string":"(hash_unmapped)","args_html":"(hash_unmapped)","location":{"filename":"src/hash_serializable.cr","line_number":434,"url":null},"def":{"name":"hash_unmapped=","args":[{"name":"hash_unmapped","external_name":"hash_unmapped","restriction":""}],"visibility":"Public","body":"@hash_unmapped = hash_unmapped"}}]}]},{"html_id":"hash_serializable/Hash/SerializableError","path":"Hash/SerializableError.html","kind":"class","full_name":"Hash::SerializableError","name":"SerializableError","abstract":false,"superclass":{"html_id":"hash_serializable/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"hash_serializable/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"hash_serializable/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hash_serializable/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/hash_serializable.cr","line_number":442,"url":null}],"repository_name":"hash_serializable","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"hash_serializable/Hash","kind":"class","full_name":"Hash(K, V)","name":"Hash"},"constructors":[{"html_id":"new(message:String|Nil,klass:String,attribute:String|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String | ::Nil"},{"name":"klass","external_name":"klass","restriction":"String"},{"name":"attribute","default_value":"nil","external_name":"attribute","restriction":"String | ::Nil"}],"args_string":"(message : String | Nil, klass : String, attribute : String | Nil = nil)","args_html":"(message : String | Nil, klass : String, attribute : String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/hash_serializable.cr","line_number":446,"url":null},"def":{"name":"new","args":[{"name":"message","external_name":"message","restriction":"String | ::Nil"},{"name":"klass","external_name":"klass","restriction":"String"},{"name":"attribute","default_value":"nil","external_name":"attribute","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(message, klass, attribute)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"attribute:String|Nil-instance-method","name":"attribute","abstract":false,"location":{"filename":"src/hash_serializable.cr","line_number":444,"url":null},"def":{"name":"attribute","return_type":"String | ::Nil","visibility":"Public","body":"@attribute"}},{"html_id":"klass:String-instance-method","name":"klass","abstract":false,"location":{"filename":"src/hash_serializable.cr","line_number":443,"url":null},"def":{"name":"klass","return_type":"String","visibility":"Public","body":"@klass"}}]}]}]}})